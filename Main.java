import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

public class Main extends JFrame implements MouseListener, MouseMotionListener, ActionListener {

	int xS = 0;
	int xMouse;
	int yMouse;
	JPanel titleBar;
	JButton close;
	Timer tm;
	
	ImageIcon laugh;
	JLabel laughLabel;
	boolean clickCheck = true;
	
	Main() {
		//this.setUndecorated(true);
		tm = new Timer(200, this);
		tm.start();
		this.setUndecorated(true);
		this.setSize(500, 500);
		this.setResizable(false);
		this.setBackground(new Color(0, 0, 0, 1));
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		
		titleBar = new JPanel();
		titleBar.setLayout(new FlowLayout(FlowLayout.TRAILING, 0, 0));
		titleBar.setPreferredSize(new Dimension(50, 50));
		titleBar.setBackground(new Color(0, 0, 0, 1));
		titleBar.addMouseListener(this);
		titleBar.addMouseMotionListener(this);
		
		close = new JButton("X");
		close.addMouseListener(this);
		close.setPreferredSize(new Dimension(50, 50));
		close.setContentAreaFilled(false);
		close.setFocusable(false);
		close.setBorder(null);
		close.setForeground(new Color(0, 0, 0, 1));
		close.setBackground(new Color(0, 0, 0, 1));
		close.setHorizontalAlignment(SwingConstants.CENTER);
		close.setVerticalAlignment(SwingConstants.CENTER);
		close.setFont(new Font("Kanit", Font.BOLD, 30));
		close.addActionListener(e -> {
			System.exit(0);
		});
		
		
		laughLabel = new JLabel("Look who got a Virus!");
		laughLabel.setIcon(laugh);
		laughLabel.setHorizontalAlignment(JLabel.CENTER);
		laughLabel.setHorizontalTextPosition(JLabel.CENTER);
		laughLabel.setVerticalTextPosition(JLabel.BOTTOM);
		laughLabel.setForeground(Color.white);
		laughLabel.setFont(new Font("Poppins", Font.BOLD, 40));
		laughLabel.addMouseListener(this);
		laughLabel.addMouseMotionListener(this);
		
		titleBar.add(close);
		this.add(titleBar, BorderLayout.NORTH);
		this.add(laughLabel, BorderLayout.CENTER);
		this.setVisible(true);
	}
	
	public static void main(String[] args) {
		new Main();
	}
	
	static ImageIcon newImage(ImageIcon c, int x, int y) {
		Image img = c.getImage();
		Image newImg = img.getScaledInstance(x, y, Image.SCALE_SMOOTH);
		return c = new ImageIcon(newImg);
	}
	
	
	
	//=========================================================

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		if(e.getSource()==titleBar) {
			xMouse = e.getX();
			yMouse = e.getY();
		}
		if(e.getSource()==close) {
			clickCheck = false;
			laugh = newImage(
					new ImageIcon("sus.png"),
					330,280
				);
			laughLabel.setText("*Vine boom sound");
			laughLabel.setIcon(laugh);
			repaint();
			revalidate();
		}
		if(e.getSource()==laughLabel) {
			xMouse = e.getX();
			yMouse = e.getY();
			clickCheck = false;
			laugh = newImage(
					new ImageIcon("blush.png"),
					280,280
				);
			laughLabel.setText("*Blushes*");
			laughLabel.setIcon(laugh);
			repaint();
			revalidate();
		}
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		clickCheck = true;
		repaint();
		revalidate();
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		if(e.getSource()==close) {
			close.setForeground(new Color(200, 0, 0, 250));
			repaint();
		}
	}

	@Override
	public void mouseExited(MouseEvent e) {
		if(e.getSource()==close) {
			close.setForeground(new Color(0, 0, 0, 1));
			repaint();
		}
	}

	@Override
	public void mouseDragged(MouseEvent e) {
		if(e.getSource()==titleBar || e.getSource()==laughLabel) {
			int x = e.getXOnScreen();
			int y = e.getYOnScreen();
			this.setLocation(x-xMouse, y-yMouse);
		}
	}

	@Override
	public void mouseMoved(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if(clickCheck) {
			laugh = newImage(
					new ImageIcon("SmilingEmojiFrames/smile("+xS+").png"),
					480,520
				);
			laughLabel.setIcon(laugh);
			if(xS < 11)
				xS++;
			else {
				xS = 0;
				tm.restart();
			}
			repaint();
			revalidate();
		}
	}

}
